{
    "eventID": "shardId-000000000000:49609560339806358283862413364490677014111167574043525122",
    "eventSourceARN": "arn:aws:kinesis:us-east-1:000000000000:stream/develop_cmsfeed",
    "kinesis": {
        "approximateArrivalTimestamp": "2020-08-05T21:06:42.210Z",
        "data": "",
        "encryptionType": "NONE",
        "partitionKey": "418ce60b-2b3f-4058-9bf4-ebba83b77021",
        "sequenceNumber": "49609560339806358283862413364490677014111167574043525122"
    }
}